Στην παρούσα εργασία κατασκευάζουμε μία διεργασία jobCommander που αναλαμβάνει να
στέλνει εργασίες προς εκτέλεση στον server (jobExecutorServer) (client-server model), ο οποίος αναλαμβάνει να τις εκτελέσει, ρυθμίζοντας τον έλεγχο ροής τους, με βάση τον βαθμό παραλληλίας των εργασιών. Η επικοινωνία πραγματοποιείται με named FIFO.
Την πρώτη φορά που εκτελείται ο client (jobCommander) δημιουργεί τον server (jobExecutorServer). Κατόπιν, επικοινωνεί μαζί του με named pipes. Ο server εκτελεί τις εργασίες χρησιμοποιώντας fork-exec και διατηρεί τις εργασίες που περιμένουν να εκτελεστούν σε μία ουρά FIFO. 

Με χρήση Makefile μπορούμε να μεταγλωτίσουμε το πρόγραμμα jobCommander.
Οι εντολές που υποστηρίζονται στον jobCommander είναι οι εξής:

1. Εκτέλεση εργασίας
	ΣΥΝΤΑΞΗ ΕΝΤΟΛΗΣ: 	jobCommander issueJob job name [arguments]
	ΠΑΡΑΔΕΙΓΜΑ ΧΡΗΣΗΣ: 	jobCommander issueJob ls -l  

2. Καθορισμός βαθμού παραλληλίας εργασιών
	ΣΥΝΤΑΞΗ ΕΝΤΟΛΗΣ: 	jobCommander setConcurrency Number
	ΠΑΡΑΔΕΙΓΜΑ ΧΡΗΣΗΣ: 	jobCommander setConcurrency  

3. Διακοπή εργασίας με συγκεκριμένο job_id
	ΣΥΝΤΑΞΗ ΕΝΤΟΛΗΣ: 	jobCommander stop job_ID
	ΠΑΡΑΔΕΙΓΜΑ ΧΡΗΣΗΣ: 	jobCommander stop job_2

4. Προβολή στοιχείων (job_id, job name, queue number) για κάθε εργασία που εκτελείται ή περιμένει στην ουρά.
	ΣΥΝΤΑΞΗ ΕΝΤΟΛΗΣ: 	jobCommander poll running|queued
	ΠΑΡΑΔΕΙΓΜΑ ΧΡΗΣΗΣ: 	jobCommander poll running

5. Διακοπή λειτουργίας του server
	ΣΥΝΤΑΞΗ ΕΝΤΟΛΗΣ: 	jobCommander exit
	ΠΑΡΑΔΕΙΓΜΑ ΧΡΗΣΗΣ: 	jobCommander exit

Υπάρχουν ακόμη 2 script αρχεία (για το bash shell), 	

1. 	ΑΡΧΕΙΟ: multijob.sh
	ΣΚΟΠΟΣ: Στέλνει εργασίες προς εκτέλεση στον server οι οποίες περιέχονται στα αρχεία της γραμμής διαταγών.
	ΣΥΝΤΑΞΗ ΕΝΤΟΛΗΣ: multijob.sh <file1>[,<file2>,...,<fileN>] 	
	ΠΑΡΑΔΕΙΓΜΑ ΧΡΗΣΗΣ: multijob.sh file1.txt file2.txt 

2. 	ΑΡΧΕΙΟ: allJobsStop.sh
	ΣΚΟΠΟΣ: Τερματίζει την εκτέλεση κάθε εργασίας που εκτελείται ή περιμένει στην ουρά.
	ΣΥΝΤΑΞΗ ΕΝΤΟΛΗΣ: allJobsStop.sh
	ΠΑΡΑΔΕΙΓΜΑ ΧΡΗΣΗΣ: allJobsStop.sh 